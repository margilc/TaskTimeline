import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { exec } from "child_process";
import chokidar from "chokidar";
import path from "path";
import fs from "fs";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";
const pluginDir = "/mnt/d/TESTVAULT/TESTVAULT/.obsidian/plugins/TaskTimeline/"; // Your plugin directory

const buildOptions = {
  banner: { js: banner },
  entryPoints: ["src/main.ts"],
  bundle: true,
  external: [
    "obsidian",
    "electron",
    "@codemirror/autocomplete",
    "@codemirror/collab",
    "@codemirror/commands",
    "@codemirror/language",
    "@codemirror/lint",
    "@codemirror/search",
    "@codemirror/state",
    "@codemirror/view",
    "@lezer/common",
    "@lezer/highlight",
    "@lezer/lr",
    ...builtins,
  ],
  format: "cjs",
  target: "es2018",
  logLevel: "info",
  sourcemap: prod ? false : "inline",
  treeShaking: true,
  outfile: "main.js",
  minify: prod,
};

/**
 * Executes a shell command and returns a Promise.
 */
function runCommand(command) {
  return new Promise((resolve, reject) => {
    exec(command, (error, stdout, stderr) => {
      if (error) {
        reject(error);
        return;
      }
      resolve(stdout.trim());
    });
  });
}

async function handleRebuild() {
  console.log("Rebuild succeeded.");

  try {
    // Bump patch version
    const newVersion = await runCommand(
      "npm version patch --no-git-tag-version"
    );
    console.log("Version bumped to:", newVersion);

    // Run version-bump script (if needed)
    console.log("Running version bump script (version-bump.mjs)...");
    await runCommand("node version-bump.mjs");
    console.log("Version bump script executed successfully.");
    //test if plugin directory exists and create it if it doesn't
    if (!fs.existsSync(pluginDir)) {
      fs.mkdirSync(pluginDir);
    }
    // Copy files
    console.log("Copying updated files to plugin directory...");
    await runCommand(
      `cp manifest.json main.js styles.css "${pluginDir}"`
    );
    console.log("Successfully copied files to plugin directory.");
  } catch (error) {
    console.error("Error during post-build steps:", error);
  }
}

async function buildProject() {
  console.log("Starting build...");
  try {
    await esbuild.build(buildOptions);
    console.log("Build completed successfully.");
    // Always run post-build steps (copy files to test vault)
    await handleRebuild();
  } catch (err) {
    console.error("Build failed:", err);
    throw err;
  }
}

async function run() {
  if (prod) {
    console.log("Production mode â€“ building once.");
    await buildProject();
  } else {
    console.log(
      "Development mode - watching for file changes in 'src' folder..."
    );

    // Trigger initial build
    await buildProject();

    // Modified watcher configuration to also watch for changes in 'styles.css'
    const watcher = chokidar.watch(['src', 'styles.css'], {
      ignored: /(^|[\/\\])\../, // ignore dotfiles
      persistent: true,
      ignoreInitial: true,
      awaitWriteFinish: {
        stabilityThreshold: 100,
        pollInterval: 100
      }
    });

    // Add more detailed logging
    watcher
      .on('add', path => console.log(`File ${path} has been added`))
      .on('change', async path => {
        console.log(`File ${path} has been changed`);
        await buildProject();
      })
      .on('unlink', path => console.log(`File ${path} has been removed`));

    // Log that watcher is ready
    watcher.on('ready', () => console.log('Initial scan complete. Ready for changes...'));
  }
}

run().catch((err) => {
  console.error("Fatal error:", err);
  process.exit(1);
});